// Package rtm34 is a autogenerated service client by gowsdl for
// https://tracking.pochta.ru/specification (rtm34 section)
package rtm34

import (
	"encoding/xml"
	"github.com/widgetii/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type CustomDutyEventsForMailErrors string

const (
	CustomDutyEventsForMailErrorsBarcodeIsNull CustomDutyEventsForMailErrors = "BarcodeIsNull"

	CustomDutyEventsForMailErrorsInternalServiceError CustomDutyEventsForMailErrors = "InternalServiceError"
)

type CustomDutyEventsForMailInput struct {
	Barcode string `xml:"Barcode,attr,omitempty"`

	Language string `xml:"Language,attr,omitempty"`
}

type CustomDutyEventsForMailOutput struct {
	CustomDutyEvent []*CustomDutyEvent `xml:"CustomDutyEvent,omitempty"`
}

type CustomDutyEvent struct {
	Number string `xml:"Number,attr,omitempty"`

	EventDateTime time.Time `xml:"EventDateTime,attr,omitempty"`

	EventType int32 `xml:"EventType,attr,omitempty"`

	EventName string `xml:"EventName,attr,omitempty"`

	IndexTo string `xml:"IndexTo,attr,omitempty"`

	IndexEvent string `xml:"IndexEvent,attr,omitempty"`

	CountryEventCode string `xml:"CountryEventCode,attr,omitempty"`

	CountryToCode string `xml:"CountryToCode,attr,omitempty"`

	SumPaymentForward int32 `xml:"SumPaymentForward,attr,omitempty"`
}

type CustomDutyEventsForMailFault struct {
	ErrorID *CustomDutyEventsForMailErrors `xml:"ErrorID,attr,omitempty"`
}

type PostalOrderEventsForMailErrors string

const (
	PostalOrderEventsForMailErrorsInvalidLoginOrPassword PostalOrderEventsForMailErrors = "InvalidLoginOrPassword"
)

type PostalOrderEvent struct {
	Number string `xml:"Number,attr,omitempty"`

	EventDateTime time.Time `xml:"EventDateTime,attr,omitempty"`

	EventType int32 `xml:"EventType,attr,omitempty"`

	EventName string `xml:"EventName,attr,omitempty"`

	IndexTo int32 `xml:"IndexTo,attr,omitempty"`

	IndexEvent int32 `xml:"IndexEvent,attr,omitempty"`

	SumPaymentForward int32 `xml:"SumPaymentForward,attr,omitempty"`

	CountryEventCode string `xml:"CountryEventCode,attr,omitempty"`

	CountryToCode string `xml:"CountryToCode,attr,omitempty"`
}

type PostalOrderEventsForMailError struct {
	ErrorID *PostalOrderEventsForMailErrors `xml:"ErrorID,attr,omitempty"`
}

type PostalOrderEventsForMailInput struct {
	Barcode string `xml:"Barcode,attr,omitempty"`

	Language string `xml:"Language,attr,omitempty"`
}

type PostalOrderEventsForMaiOutput struct {
	PostalOrderEvent []*PostalOrderEvent `xml:"PostalOrderEvent,omitempty"`
}

type PostalOrderEventsForMailFault struct {
	PostalOrderEventsForMailError []*PostalOrderEventsForMailError `xml:"PostalOrderEventsForMailError,omitempty"`
}

type LanguageData struct {
	XMLName xml.Name `xml:"http://russianpost.org/sms-info/data LanguageData"`

	Language []struct {
		Name string `xml:"name,attr,omitempty"`

		Code string `xml:"code,attr,omitempty"`
	} `xml:"Language,omitempty"`
}

type SmsHistoryData struct {
	XMLName xml.Name `xml:"http://russianpost.org/sms-info/data SmsHistoryData"`

	HistoryRecord []*SmsHistoryRecord `xml:"historyRecord,omitempty"`
}

type SmsHistoryRequest struct {
	XMLName xml.Name `xml:"http://russianpost.org/sms-info/data SmsHistoryRequest"`

	Barcode string `xml:"Barcode,omitempty"`

	Language string `xml:"Language,omitempty"`
}

type SmsHistoryRecord struct {
	Id int32 `xml:"Id,omitempty"`

	Number string `xml:"Number,omitempty"`

	NotificationTypeID int32 `xml:"NotificationTypeID,omitempty"`

	NotificationTypeName string `xml:"NotificationTypeName,omitempty"`

	NotificationStatusID int32 `xml:"NotificationStatusID,omitempty"`

	NotificationStatusName string `xml:"NotificationStatusName,omitempty"`

	NotificationStatusDate time.Time `xml:"NotificationStatusDate,omitempty"`

	SendedID int32 `xml:"SendedID,omitempty"`

	SourceOperation string `xml:"SourceOperation,omitempty"`
}

type RequestType string

const (
	RequestTypeUpdate RequestType = "update"

	RequestTypeDelete RequestType = "delete"
)

type AuthorizationHeader struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory/data AuthorizationHeader"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`

	MustUnderstand string `xml:"mustUnderstand,attr,omitempty"`
}

type OperationHistoryData struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory/data OperationHistoryData"`

	HistoryRecord []*OperationHistoryRecord `xml:"historyRecord,omitempty"`
}

type OperationHistoryRequest struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory/data OperationHistoryRequest"`

	Barcode string `xml:"Barcode,omitempty"`

	MessageType int32 `xml:"MessageType,omitempty"`

	Language string `xml:"Language,omitempty"`
}

type OperationHistoryRecord struct {
	AddressParameters *AddressParameters `xml:"AddressParameters,omitempty"`

	FinanceParameters *FinanceParameters `xml:"FinanceParameters,omitempty"`

	ItemParameters *ItemParameters `xml:"ItemParameters,omitempty"`

	OperationParameters *OperationParameters `xml:"OperationParameters,omitempty"`

	UserParameters *UserParameters `xml:"UserParameters,omitempty"`
}

type AddressParameters struct {
	DestinationAddress *Address `xml:"DestinationAddress,omitempty"`

	OperationAddress *Address `xml:"OperationAddress,omitempty"`

	MailDirect *Country `xml:"MailDirect,omitempty"`

	CountryFrom *Country `xml:"CountryFrom,omitempty"`

	CountryOper *Country `xml:"CountryOper,omitempty"`
}

type Address struct {
	Index string `xml:"Index,omitempty"`

	Description string `xml:"Description,omitempty"`
}

type Country struct {
	Id int32 `xml:"Id,omitempty"`

	Code2A string `xml:"Code2A,omitempty"`

	Code3A string `xml:"Code3A,omitempty"`

	Name string `xml:"Name,omitempty"`

	NameRU string `xml:"NameRU,omitempty"`

	NameEN string `xml:"NameEN,omitempty"`
}

type FinanceParameters struct {
	Payment int32 `xml:"Payment,omitempty"`

	Value int32 `xml:"Value,omitempty"`

	MassRate int32 `xml:"MassRate,omitempty"`

	InsrRate int32 `xml:"InsrRate,omitempty"`

	AirRate int32 `xml:"AirRate,omitempty"`

	Rate int32 `xml:"Rate,omitempty"`

	CustomDuty int32 `xml:"CustomDuty,omitempty"`
}

type ItemParameters struct {
	Barcode string `xml:"Barcode,omitempty"`

	Internum string `xml:"Internum,omitempty"`

	ValidRuType bool `xml:"ValidRuType,omitempty"`

	ValidEnType bool `xml:"ValidEnType,omitempty"`

	ComplexItemName string `xml:"ComplexItemName,omitempty"`

	MailRank *Rtm02Parameter `xml:"MailRank,omitempty"`

	PostMark *Rtm02Parameter `xml:"PostMark,omitempty"`

	MailType *Rtm02Parameter `xml:"MailType,omitempty"`

	MailCtg *Rtm02Parameter `xml:"MailCtg,omitempty"`

	Mass int32 `xml:"Mass,omitempty"`

	MaxMassRU int32 `xml:"MaxMassRU,omitempty"`

	MaxMassEN int32 `xml:"MaxMassEN,omitempty"`
}

type Rtm02Parameter struct {
	Id int32 `xml:"Id,omitempty"`

	Name string `xml:"Name,omitempty"`
}

type OperationParameters struct {
	OperType *Rtm02Parameter `xml:"OperType,omitempty"`

	OperAttr *Rtm02Parameter `xml:"OperAttr,omitempty"`

	OperDate time.Time `xml:"OperDate,omitempty"`
}

type UserParameters struct {
	SendCtg *Rtm02Parameter `xml:"SendCtg,omitempty"`

	Sndr string `xml:"Sndr,omitempty"`

	Rcpn string `xml:"Rcpn,omitempty"`
}

type UpdateOperationRequest struct {
	RequestType *RequestType `xml:"RequestType,omitempty"`

	SourceOperation *OperationHistoryRecord `xml:"SourceOperation,omitempty"`

	TargetOperation *OperationHistoryRecord `xml:"TargetOperation,omitempty"`

	ReasonDescription string `xml:"ReasonDescription,omitempty"`

	InitiatorDepartment int32 `xml:"InitiatorDepartment,omitempty"`

	ExecutorIP string `xml:"ExecutorIP,omitempty"`
}

type GetSmsHistoryResponse struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getSmsHistoryResponse"`

	SmsHistoryData *SmsHistoryData `xml:"SmsHistoryData,omitempty"`
}

type GetLanguagesResponse struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getLanguagesResponse"`

	LanguageData *LanguageData `xml:"LanguageData,omitempty"`
}

type GetLanguages struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getLanguages"`

	AuthorizationHeader *AuthorizationHeader `xml:"AuthorizationHeader,omitempty"`
}

type GetCustomDutyEventsForMail struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getCustomDutyEventsForMail"`

	AuthorizationHeader *AuthorizationHeader `xml:"AuthorizationHeader,omitempty"`

	CustomDutyEventsForMailInput *CustomDutyEventsForMailInput `xml:"CustomDutyEventsForMailInput,omitempty"`
}

type GetOperationHistory struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getOperationHistory"`

	OperationHistoryRequest *OperationHistoryRequest `xml:"OperationHistoryRequest,omitempty"`

	AuthorizationHeader *AuthorizationHeader `xml:"AuthorizationHeader,omitempty"`
}

type PostalOrderEventsForMailResponse struct {
	PostalOrderEventsForMaiOutput *PostalOrderEventsForMaiOutput `xml:"PostalOrderEventsForMaiOutput,omitempty"`
}

type PostalOrderEventsForMail struct {
	AuthorizationHeader *AuthorizationHeader `xml:"AuthorizationHeader,omitempty"`

	PostalOrderEventsForMailInput *PostalOrderEventsForMailInput `xml:"PostalOrderEventsForMailInput,omitempty"`
}

type GetCustomDutyEventsForMailResponse struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getCustomDutyEventsForMailResponse"`

	CustomDutyEventsForMailOutput *CustomDutyEventsForMailOutput `xml:"CustomDutyEventsForMailOutput,omitempty"`
}

type GetOperationHistoryResponse struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getOperationHistoryResponse"`

	OperationHistoryData *OperationHistoryData `xml:"OperationHistoryData,omitempty"`
}

type GetSmsHistory struct {
	XMLName xml.Name `xml:"http://russianpost.org/operationhistory getSmsHistory"`

	AuthorizationHeader *AuthorizationHeader `xml:"AuthorizationHeader,omitempty"`

	SmsHistoryRequest *SmsHistoryRequest `xml:"SmsHistoryRequest,omitempty"`
}

type OperationHistory12 interface {

	// Error can be either of the following types:
	//
	//   - OperationHistoryFault
	//   - AuthorizationFault

	GetOperationHistory(request *GetOperationHistory) (*GetOperationHistoryResponse, error)

	// Error can be either of the following types:
	//
	//   - OperationHistoryFault
	//   - AuthorizationFault
	//   - LanguageFault

	GetLanguages(request *GetLanguages) (*GetLanguagesResponse, error)

	// Error can be either of the following types:
	//
	//   - CustomDutyEventsForMailFault
	//   - AuthorizationFault
	//   - LanguageFault

	GetCustomDutyEventsForMail(request *GetCustomDutyEventsForMail) (*GetCustomDutyEventsForMailResponse, error)

	// Error can be either of the following types:
	//
	//   - SmsHistoryFault
	//   - AuthorizationFault
	//   - LanguageFault

	GetSmsHistory(request *GetSmsHistory) (*GetSmsHistoryResponse, error)

	// Error can be either of the following types:
	//
	//   - PostalOrderEventsForMailFault

	PostalOrderEventsForMail(request *PostalOrderEventsForMail) (*PostalOrderEventsForMailResponse, error)
}

type operationHistory12 struct {
	client *soap.Client
}

func NewOperationHistory12(client *soap.Client) OperationHistory12 {
	return &operationHistory12{
		client: client,
	}
}

func (service *operationHistory12) GetOperationHistory(request *GetOperationHistory) (*GetOperationHistoryResponse, error) {
	response := new(GetOperationHistoryResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *operationHistory12) GetLanguages(request *GetLanguages) (*GetLanguagesResponse, error) {
	response := new(GetLanguagesResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *operationHistory12) GetCustomDutyEventsForMail(request *GetCustomDutyEventsForMail) (*GetCustomDutyEventsForMailResponse, error) {
	response := new(GetCustomDutyEventsForMailResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *operationHistory12) GetSmsHistory(request *GetSmsHistory) (*GetSmsHistoryResponse, error) {
	response := new(GetSmsHistoryResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *operationHistory12) PostalOrderEventsForMail(request *PostalOrderEventsForMail) (*PostalOrderEventsForMailResponse, error) {
	response := new(PostalOrderEventsForMailResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
