// Package fc is a autogenerated service client by gowsdl for
// https://tracking.pochta.ru/specification (fc section)
package fc

import (
	"encoding/xml"
	"time"

	"github.com/widgetii/gowsdl/soap"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type PositiveInteger uint
type NonNegativeInteger int

type LanguageData struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org/postserver LanguageData"`

	Language []struct {
		Name string `xml:"name,attr,omitempty"`

		Code string `xml:"code,attr,omitempty"`
	} `xml:"Language,omitempty"`
}

type TicketRequest struct {
	XMLName xml.Name `xml:"ns0:ticketRequest"`

	Request *File `xml:"request,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`

	Language string `xml:"language,omitempty"`
}

type AnswerByTicketRequest struct {
	XMLName xml.Name `xml:"ns0:answerByTicketRequest"`

	Ticket string `xml:"ticket,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type AnswerByTicketResponse struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org/postserver answerByTicketResponse"`

	Value *File `xml:"value,omitempty"`

	Error *Error `xml:"error,omitempty"`
}

type TicketResponse struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org/postserver ticketResponse"`

	Value string `xml:"value,omitempty"`

	Error *Error `xml:"error,omitempty"`
}

type File struct {
	Item []*Item `xml:"Item,omitempty"`

	FileName string `xml:"FileName,attr,omitempty"`

	FileTypeID int32 `xml:"FileTypeID,attr,omitempty"`

	FileNumber *PositiveInteger `xml:"FileNumber,attr,omitempty"`

	SenderID *PositiveInteger `xml:"SenderID,attr,omitempty"`

	RecipientID *PositiveInteger `xml:"RecipientID,attr,omitempty"`

	DatePreparation string `xml:"DatePreparation,attr,omitempty"`
}

type Item struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org Item"`

	Operation []*Operation `xml:"Operation,omitempty"`

	Error []*Error `xml:"Error,omitempty"`

	Barcode string `xml:"Barcode,attr,omitempty"`
}

type Operation struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org operation"`

	OperTypeID *PositiveInteger `xml:"OperTypeID,attr,omitempty"`

	OperCtgID *NonNegativeInteger `xml:"OperCtgID,attr,omitempty"`

	OperName string `xml:"OperName,attr,omitempty"`

	DateOper string `xml:"DateOper,attr,omitempty"`

	IndexOper string `xml:"IndexOper,attr,omitempty"`
}

type Error struct {
	XMLName xml.Name `xml:"http://fclient.russianpost.org error"`

	ErrorTypeID *PositiveInteger `xml:"ErrorTypeID,attr,omitempty"`

	ErrorName string `xml:"ErrorName,attr,omitempty"`
}

type FederalClient interface {
	GetTicket(request *TicketRequest) (*TicketResponse, error)

	GetResponseByTicket(request *AnswerByTicketRequest) (*AnswerByTicketResponse, error)
}

type federalClient struct {
	client *soap.Client
}

func NewFederalClient(client *soap.Client) FederalClient {
	return &federalClient{
		client: client,
	}
}

func (service *federalClient) GetTicket(request *TicketRequest) (*TicketResponse, error) {
	response := new(TicketResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *federalClient) GetResponseByTicket(request *AnswerByTicketRequest) (*AnswerByTicketResponse, error) {
	response := new(AnswerByTicketResponse)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
